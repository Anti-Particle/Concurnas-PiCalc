from java.util import ArrayList
from java.math import BigDecimal
from java.math import RoundingMode
// Determines the number of calculations done by a core
constant LOOP_SIZE = 2000000.0 
constant LIST_LENGTH = 10000

def doCalc(start double) double {
    finish = start + LOOP_SIZE
    var pi = 0.0
    // Repeats this math process and returns a value
    for (it = start; it < finish; it++) {
        if (it mod 2 == 0) {
            pi += (1/((2 * it) + 1.0))
        }
        else {
            pi += (-1/((2 * it) + 1.0))
        }
    }
    return pi
}

def performCalc() double {
    // Creates a new list to be populated with refs that are doubles
    list = new ArrayList<double:>();

    // Adds the calculated values to the list
    for (i = 0; i < LIST_LENGTH; i++) {
        startValue = i * LOOP_SIZE
        list.add(
            // The actual part that is multithreaded, the brackets and explamation mark can be removed to make the program single threaded
            {doCalc(startValue)}!
        )
    }
    
    // Adds all of the elements in the list together
    pi = 0.0
    for (ele in list) {
        pi = pi + ele:
    }
    // Since the values added together only equal π/4
    return pi * 4
}

def main() {
    // Prints the splash text
    drawSplashArt()

    // Does the work and times it
    start = System.currentTimeMillis()
    pi = performCalc()
    end = System.currentTimeMillis()

    // Outputs the results and the time taken
    compareAndPrint(pi, end - start)
}

// Prints banner
def drawSplashArt() {
    ANSI_RESET = "\u001B[0m"
    ANSI_BLACK = "\u001B[30m"
    ANSI_RED = "\u001B[31m"
    ANSI_GREEN = "\u001B[32m"
    ANSI_YELLOW = "\u001B[33m"
    ANSI_BLUE = "\u001B[34m"
    ANSI_PURPLE = "\u001B[35m"
    ANSI_CYAN = "\u001B[36m"
    ANSI_WHITE = "\u001B[37m"

    System.out.println()
    System.out.println(ANSI_CYAN    + "╔" + ANSI_CYAN   + "═════════════════════════════════════════════════════════" + ANSI_CYAN + "╗")
    System.out.println(ANSI_CYAN    + "║" + ANSI_RED    + " ██████╗  ██╗███████╗██╗  ██╗ █████╗ ██╗   ██╗█ ███████╗ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_GREEN  + " ██╔══██╗ ██║██╔════╝██║  ██║██╔══██╗██║   ██║  ██╔════╝ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_YELLOW + " ██████╔╝ ██║███████╗███████║███████║██║   ██║  ███████╗ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_BLUE   + " ██╔══██╗ ██║╚════██║██╔══██║██╔══██║╚██╗ ██╔╝  ╚════██║ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_PURPLE + " ██║   ██╗██║███████║██║  ██║██║  ██║ ╚████╔╝   ███████║ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_PURPLE + " ╚═╝   ╚═╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝  ╚═══╝    ╚══════╝ " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "         ██████╗ ██████╗ ██╗   ██╗     ██████╗ ██╗       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "        ██╔════╝ ██╔══██╗██║   ██║     ██╔══██╗██║       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "        ██║      ██████╔╝██║   ██║ ██  ██████╔╝██║       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "        ██║      ██╔═══╝ ██║   ██║     ██╔═══╝ ██║       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "        ╚██████╗ ██║     ╚██████╔╝     ██║     ██║       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "║" + ANSI_WHITE  + "         ╚═════╝ ╚═╝      ╚═════╝      ╚═╝     ╚═╝       " + ANSI_CYAN + "║")
    System.out.println(ANSI_CYAN    + "╚" + ANSI_CYAN   + "═════════════════════════════════════════════════════════" + ANSI_CYAN + "╝")
    System.out.println(ANSI_RESET)
}

// Compares with real Pi and prints color coded match
def compareAndPrint(piVal double, time long) {
    ANSI_GREEN = "\u001B[32m"
    ANSI_RESET = "\u001B[0m"
    System.out.print("       π = ")
    val PI = ((BigDecimal("3.141592653589793")).toString()).split("")
    val π = ((BigDecimal(piVal).setScale(15, RoundingMode.DOWN)).toString()).split("")
    for (element = 0; element < π.length; element++) {
        if (π[element] == PI[element]) {
            System.out.print(ANSI_GREEN + π[element] + ANSI_RESET)
        }
        else {
            System.out.print(π[element])
        }
    }
    System.out.println()
    System.out.println("Time taken = {(time)/1000} seconds and {(time) mod 1000} milliseconds.")
}